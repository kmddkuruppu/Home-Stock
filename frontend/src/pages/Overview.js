import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Edit, Trash, Eye, FileText, CheckCircle, ChevronDown, ChevronUp } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import logo from '../logo.png';

const particleColors = [
  'from-green-400 to-emerald-500',
  'from-blue-400 to-cyan-500',
  'from-purple-400 to-indigo-500',
  'from-yellow-400 to-amber-500',
];

const SuccessConfetti = () => (
  <>
    {[...Array(100)].map((_, i) => (
      <motion.div
        key={i}
        className={`absolute rounded-md bg-gradient-to-r ${
          particleColors[Math.floor(Math.random() * particleColors.length)]
        }`}
        initial={{
          x: window.innerWidth / 2,
          y: window.innerHeight / 2,
          width: Math.random() * 10 + 5,
          height: Math.random() * 10 + 5,
          opacity: 0,
          scale: 0
        }}
        animate={{
          x: Math.random() * window.innerWidth,
          y: Math.random() * window.innerHeight,
          opacity: [0, 1, 0.8, 0],
          scale: [0, 1, 0.8]
        }}
        transition={{
          duration: Math.random() * 3 + 1.5,
          delay: Math.random() * 0.5,
          ease: "easeOut"
        }}
      />
    ))}
  </>
);

const DeleteConfirmationModal = ({ isOpen, onClose, onConfirm }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-800 rounded-lg p-6 w-96 border border-gray-700 animate-fade-in">
        <h3 className="text-xl font-semibold text-gray-100 mb-4">Confirm Deletion</h3>
        <p className="text-gray-300 mb-6">Are you sure you want to delete this expense? This action cannot be undone.</p>
        <div className="flex justify-end space-x-4">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition duration-200"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition duration-200"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );
};

const generateHomeStockPDF = (expenses, month, year, totalOverall) => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });

  const monthName = new Date(year, month - 1, 1).toLocaleString('default', { month: 'long' });
  
  doc.addImage(logo, 'PNG', 14, 20, 20, 20);
  doc.setFontSize(17);
  doc.text('WELCOME TO', 40, 27);
  doc.setFontSize(24);
  doc.text('HOME STOCK PRO', 40, 38);
  doc.setFontSize(20);
  doc.text(`${monthName} ${year} Expense Report`, 14, 50);

  const date = new Date();
  doc.setFontSize(12);
  doc.text(`Generated on: ${date.toLocaleString()}`, 14, 60);

  const contactInfo = `Contact: +94 77 123 4567\nEmail: homestockpro@gmail.com\nAddress: 45 Main Avenue, Colombo\nSri Lanka`;
  doc.setFontSize(11);
  doc.text(contactInfo, 195, 75, { align: 'right' });

  const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);
  const averageExpense = expenses.length > 0 ? totalExpenses / expenses.length : 0;
  
  doc.setFontSize(14);
  doc.text('Financial Summary', 14, 75);
  doc.setFontSize(11);
  doc.text(`Total Expenses: Rs. ${totalExpenses.toFixed(2)}`, 14, 82);
  doc.text(`Average Expense: Rs. ${averageExpense.toFixed(2)}`, 14, 88);
  doc.text(`Overall Total Expenses: Rs. ${totalOverall.toFixed(2)}`, 14, 94);

  const tableColumn = ["Category", "Description", "Amount (Rs.)", "Date"];
  const tableRows = expenses.map(expense => [
    expense.category,
    expense.description.length > 30 ? expense.description.substring(0, 30) + '...' : expense.description,
    expense.amount.toFixed(2),
    new Date(expense.date).toLocaleDateString(),
  ]);

  autoTable(doc, {
    startY: 100,
    head: [tableColumn],
    body: tableRows,
    theme: 'grid',
    headStyles: { 
      fillColor: [28, 102, 130],
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    alternateRowStyles: { fillColor: [239, 239, 239] },
    styles: { 
      fontSize: 10, 
      cellPadding: 3,
      textColor: [0, 0, 0]
    },
    columnStyles: {
      2: { halign: 'right' }
    }
  });

  const pageHeight = doc.internal.pageSize.height;
  doc.setFontSize(10);
  doc.text('Generated by Home Stock Pro System', 105, pageHeight - 10, { align: 'center' });

  doc.save(`Expense_Report_${monthName}_${year}.pdf`);
};

const MonthlyExpenseSection = ({ monthData }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  
  const totalMonthlyExpense = monthData.expenses.reduce(
    (sum, expense) => sum + parseFloat(expense.amount), 
    0
  );
  
  return (
    <div className="mb-6 bg-gray-800 rounded-lg shadow-md border border-gray-700 overflow-hidden">
      <div 
        className="flex justify-between items-center bg-gray-700 px-6 py-4 cursor-pointer hover:bg-gray-650 transition-colors"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <h2 className="text-xl font-bold text-gray-100">
          {monthData.monthName} {monthData.year}
        </h2>
        <div className="flex items-center">
          <span className="text-lg font-semibold text-green-400 mr-4">
            LKR {totalMonthlyExpense.toFixed(2)}
          </span>
          {isExpanded ? (
            <ChevronUp className="text-gray-400" />
          ) : (
            <ChevronDown className="text-gray-400" />
          )}
        </div>
      </div>
      
      {isExpanded && (
        <>
          <div className="overflow-x-auto">
            <table className="w-full table-auto">
              <thead className="bg-gray-800 border-b border-gray-700">
                <tr>
                  <th className="px-6 py-3 text-left text-gray-300">Amount (LKR)</th>
                  <th className="px-6 py-3 text-left text-gray-300">Category</th>
                  <th className="px-6 py-3 text-left text-gray-300">Description</th>
                  <th className="px-6 py-3 text-left text-gray-300">Date</th>
                </tr>
              </thead>
              <tbody>
                {monthData.expenses.map((expense, index) => (
                  <tr 
                    key={expense._id} 
                    className={`border-b border-gray-700 ${index % 2 === 0 ? 'bg-gray-800' : 'bg-gray-900'} hover:bg-gray-700 transition`}
                  >
                    <td className="px-6 py-4 text-left text-gray-300">Rs. {expense.amount.toFixed(2)}</td>
                    <td className="px-6 py-4 text-left text-gray-300">{expense.category}</td>
                    <td className="px-6 py-4 text-left text-gray-300">{expense.description}</td>
                    <td className="px-6 py-4 text-left text-gray-300">
                      {new Date(expense.date).toLocaleDateString()}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </>
      )}
    </div>
  );
};

const BudgetOverview = () => {
  const [expenses, setExpenses] = useState([]);
  const [monthlyExpenses, setMonthlyExpenses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchExpenses = async () => {
      try {
        const response = await fetch('http://localhost:8070/budget');
        const data = await response.json();
        const expensesData = Array.isArray(data.expenses) ? data.expenses : [];
        setExpenses(expensesData);
        
        const groupedExpenses = groupExpensesByMonth(expensesData);
        setMonthlyExpenses(groupedExpenses);
      } catch (error) {
        console.error('Error fetching expenses:', error);
      } finally {
        setLoading(false);
      }
    };
    fetchExpenses();
  }, []);

  const groupExpensesByMonth = (expenses) => {
    const monthsMap = new Map();
    
    expenses.forEach(expense => {
      const date = new Date(expense.date);
      const month = date.getMonth() + 1;
      const year = date.getFullYear();
      const key = `${year}-${month}`;
      
      if (!monthsMap.has(key)) {
        monthsMap.set(key, {
          month,
          year,
          monthName: date.toLocaleString('default', { month: 'long' }),
          expenses: []
        });
      }
      
      monthsMap.get(key).expenses.push(expense);
    });
    
    return Array.from(monthsMap.values())
      .sort((a, b) => {
        if (a.year !== b.year) return b.year - a.year;
        return b.month - a.month;
      });
  };

  const handleGeneratePDF = (monthData) => {
    const totalOverall = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);
    generateHomeStockPDF(monthData.expenses, monthData.month, monthData.year, totalOverall);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen bg-gray-900">
        <p className="text-2xl text-gray-300">Loading Expenses...</p>
      </div>
    );
  }

  return (
    <div className="bg-gray-900 min-h-screen w-full m-0 p-0">
      {/* Remove padding on the main container and set width to full */}
      <div className="max-w-full mx-auto bg-gray-900 py-8">
        <div className="bg-gray-800 shadow-xl rounded-lg p-8 border border-gray-700 mx-4">
          <h1 className="text-4xl font-bold text-center text-gray-100 mb-8">
            Monthly Expense Overview
          </h1>

          <div className="flex justify-between items-center mb-6">
            <button
              onClick={() => navigate(-1)}
              className="px-4 py-2 bg-gray-600 text-white rounded-lg shadow-md hover:bg-gray-700 transition"
            >
              Back
            </button>

            <div className="flex items-center space-x-4">
              <input
                type="text"
                placeholder="Search by month..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="px-4 py-2 border border-gray-600 rounded-lg w-64 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-700 text-gray-200"
              />
            </div>
          </div>

          {monthlyExpenses
            .filter(monthData => 
              monthData.monthName.toLowerCase().includes(searchTerm.toLowerCase().trim())
            )
            .map((monthData, index) => (
              <div key={`${monthData.year}-${monthData.month}`} className="mb-8">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-2xl font-semibold text-gray-200">
                    {monthData.monthName} {monthData.year}
                  </h2>
                  <button
                    onClick={() => handleGeneratePDF(monthData)}
                    className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-700 transition"
                  >
                    <FileText className="mr-2" size={18} />
                    Generate PDF
                  </button>
                </div>
                
                <MonthlyExpenseSection 
                  monthData={monthData}
                />
              </div>
            ))}
          
          {monthlyExpenses.length === 0 && (
            <div className="bg-gray-700 rounded-lg p-8 text-center">
              <p className="text-gray-300 text-lg">No expenses found. Add some expenses to get started!</p>
            </div>
          )}

          <div className="mt-8 bg-gray-700 p-6 rounded-lg border border-gray-600">
            <h2 className="text-2xl font-bold text-gray-100 mb-4">Overall Summary</h2>
            <div className="flex justify-between items-center">
              <span className="text-lg font-semibold text-gray-300">Total Expenses</span>
              <span className="text-xl font-bold text-green-400">
                LKR. {expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0).toFixed(2)}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BudgetOverview;