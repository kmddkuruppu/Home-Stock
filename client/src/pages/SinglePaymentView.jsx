import React, { useState, useEffect, useRef } from 'react';
import { useParams } from 'react-router-dom';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import Footer from './Footer';
import Header from './Header';

const SinglePaymentView = () => {
  const { id } = useParams();
  const [payment, setPayment] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const printRef = useRef();

  useEffect(() => {
    const fetchPaymentDetails = async () => {
      try {
        const response = await fetch(`http://localhost:5000/api/get-single-payment/${id}`);
        if (!response.ok) throw new Error('Payment not found');
        const data = await response.json();
        setPayment(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchPaymentDetails();
  }, [id]);

  const formatNumbers = (x) => x?.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

  const handlePrint = () => {
    window.print();
  };

  const handleReportGeneration = () => {
    const doc = new jsPDF();
    doc.setFont('helvetica');

    // Header
    doc.setFontSize(26);
    doc.setTextColor(54, 69, 79);
    doc.text('HomeStock', 20, 20);

    doc.setFontSize(14);
    doc.setTextColor(120);
    doc.text('Your Ultimate Shopping Partner', 20, 28);

    // Invoice Title
    doc.setFontSize(20);
    doc.setTextColor(40, 40, 40);
    doc.text('Payment Invoice', 105, 45, { align: 'center' });
/*
    // Invoice ID
    doc.setFontSize(10);
    doc.setTextColor(120);
    doc.text(`Invoice ID: ${payment.id}`, 105, 52, { align: 'center' });*/

    // Customer Details Section
    let yOffset = 70;
    doc.setFontSize(14);
    doc.setTextColor(50, 50, 50);
    doc.text('Customer Details', 20, yOffset);
    yOffset += 8;

    doc.setFontSize(11);
    const customerDetails = [
      { label: "Full Name", value: payment.fullName },
      { label: "Phone", value: payment.phone },
      { label: "Payment Method", value: payment.paymentMethod },
      { label: "Card Number", value: payment.cardNumber },
      { label: "CVC", value: payment.cardCVC },
      { label: "Expiration Date", value: payment.cardExpiry },
    ];
    customerDetails.forEach(detail => {
      doc.text(`${detail.label}:`, 20, yOffset);
      doc.setTextColor(80);
      doc.text(`${detail.value}`, 70, yOffset);
      yOffset += 6;
      doc.setTextColor(50);
    });

    // Purchased Items Table
    yOffset += 10;
    doc.setFontSize(14);
    doc.setTextColor(50, 50, 50);
    doc.text(' Purchased Items', 20, yOffset);
    yOffset += 5;

    const items = payment.cartItems.map(item => ([
      item.item,
      `x${item.amount}`,
      `Rs. ${formatNumbers(item.price)}`
    ]));

    doc.autoTable({
      head: [['Item', 'Quantity', 'Price']],
      body: items,
      startY: yOffset,
      theme: 'striped',
      styles: { fontSize: 11 },
      headStyles: {
        fillColor: [99, 102, 241],
        textColor: 255,
        halign: 'center',
        valign: 'middle',
      },
      bodyStyles: {
        halign: 'center',
      },
      alternateRowStyles: { fillColor: [240, 240, 255] },
      margin: { top: 10 }
    });

    yOffset = doc.lastAutoTable.finalY + 10;

    // Total Amount
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text(`Total Amount:`, 20, yOffset);
    doc.setFontSize(14);
    doc.setTextColor(34, 139, 34);
    doc.text(`Rs. ${formatNumbers(payment.totalAmount)}`, 60, yOffset);

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text('Generated by HomeStock • Thank you for trusting us!', 105, 290, { align: 'center' });

    // Save the PDF
    doc.save(`homestock_invoice_${payment.id}.pdf`);
  };

  if (loading) {
    return <div className="flex justify-center items-center h-screen text-lg text-gray-700">Loading...</div>;
  }

  if (error) {
    return <div className="flex justify-center items-center h-screen text-lg text-red-500">Error: {error}</div>;
  }

  return (
    <div className="min-h-screen bg-gradient-to-tr from-indigo-100 via-blue-50 to-indigo-200 flex flex-col">
      {/* Header (hide in print) */}
      <div className="print:hidden">
        <Header />
      </div>

      {/* Payment Details */}
      <main className="flex-grow max-w-5xl w-full mx-auto p-6 sm:p-10" ref={printRef}>
        <div className="bg-white rounded-3xl shadow-2xl p-10 border border-blue-200">
          <h1 className="text-4xl font-bold text-center text-gray-800 mb-2">Payment Invoice</h1>
          <p className="text-center text-blue-500 text-md mb-10 tracking-wide">Your Ultimate Shopping Partner • Great choice! {payment.id}</p>

          {/* Customer Details */}
          <section className="space-y-5 text-gray-700 text-base mb-10">
            {[
              { label: "Full Name", value: payment.fullName },
              { label: "Phone", value: payment.phone },
              { label: "Payment Method", value: payment.paymentMethod },
              { label: "Card Number", value: payment.cardNumber },
              { label: "CVC", value: payment.cardCVC },
              { label: "Expiration Date", value: payment.cardExpiry },
            ].map((detail, index) => (
              <div key={index} className="flex justify-between border-b border-gray-200 pb-3">
                <span className="font-semibold">{detail.label}</span>
                <span>{detail.value}</span>
              </div>
            ))}
          </section>

          {/* Purchased Items */}
          <section className="mt-10">
            <h2 className="text-2xl font-bold text-indigo-700 mb-6">Purchased Items</h2>
            <div className="space-y-4">
              {payment.cartItems.map((item, index) => (
                <div key={index} className="flex justify-between items-center border-b border-gray-200 pb-3">
                  <span>{item.item} <span className="text-gray-400">(x{item.amount})</span></span>
                  <span className="font-semibold text-gray-800">Rs. {formatNumbers(item.price)}</span>
                </div>
              ))}
            </div>
          </section>

          {/* Total */}
          <div className="mt-10 pt-6 border-t-2 border-indigo-300 flex justify-between items-center text-2xl font-extrabold text-gray-800">
            <span>Total Amount:</span>
            <span>Rs. {formatNumbers(payment.totalAmount)}</span>
          </div>
        </div>
      </main>

      {/* Buttons */}
      <div className="print:hidden flex flex-col md:flex-row justify-center items-center gap-6 mt-8 mb-12">
        <button
          onClick={handlePrint}
          className="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 px-8 rounded-full shadow-lg hover:shadow-xl transition duration-300 transform hover:scale-105"
        >
          Print Payment
        </button>
        <button
          onClick={handleReportGeneration}
          className="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-8 rounded-full shadow-lg hover:shadow-xl transition duration-300 transform hover:scale-105"
        >
          Generate Report
        </button>
      </div>

      {/* Footer */}
      <div className="print:hidden">
        <Footer />
      </div>
    </div>
  );
};

export default SinglePaymentView;
